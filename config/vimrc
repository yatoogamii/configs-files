
""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""Plugin""""""""""""""""""""""""" 
""""""""""""""""""""""""""""""""""""""""""""""""""""

		call plug#begin()        

        Plug 'valloric/youcompleteme'
        Plug 'tpope/vim-fugitive'                               " Git plug
        Plug 'tpope/vim-surround'                               " easy { [ ( :wq
        Plug 'vim-airline/vim-airline'
        Plug 'tpope/vim-repeat'
        Plug 'mattn/emmet-vim'                                  " Html
        Plug 'lifepillar/vim-solarized8'                        
        Plug 'sirver/ultisnips'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'tpope/vim-commentary'
        Plug 'ervandew/supertab'
        Plug 'sjl/gundo.vim'
        Plug 'honza/vim-snippets'
        Plug 'ap/vim-css-color'
        Plug 'wellle/targets.vim'			
        Plug 'junegunn/gv.vim'
        Plug 'jiangmiao/auto-pairs'
        Plug 'alvan/vim-closetag'
        Plug 'junegunn/fzf'          
        Plug 'junegunn/fzf.vim'
        Plug 'xolox/vim-notes'
        Plug 'xolox/vim-misc'
        Plug 'ryanoasis/vim-devicons'
        Plug 'easymotion/vim-easymotion'
        Plug 'shmargum/vim-sass-colors'
        Plug 'mattn/webapi-vim'
        Plug 'rhysd/vim-healthcheck'	
        Plug 'terryma/vim-multiple-cursors'
		call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""Command option""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""

       	"set number
        set nocompatible
        set relativenumber
        filetype plugin on
        syntax on
        set t_Co=256
        let g:solarized_termcolors=256
        let g:solarized_termtrans = 1
        set background=dark
        colorscheme solarized8_high
        let g:solarized_use16 = 1
        set showcmd                           "show command at bottom right
        let g:airline#extensions#tabline#enabled = 1
        let g:airline_theme = 'solarized'
        set laststatus =2                     "show status line
        set noshowmode
        set incsearch
        " show existing tab with 4 spaces width
        set tabstop=4
        " when indenting with '>', use 2 spaces width
        set shiftwidth=2
        " On pressing tab, insert 4 spaces
        set expandtab
        set scrolloff =19                     "page down with my cursor 
        set cursorline                        "blink cursor line
		set ignorecase
		let showbreak ="â†³ "                  
		set fileencodings+=utf-8
		set encoding=utf-8
		if (has("termguicolors"))
          set termguicolors
        endif
		set autoread                        " scss auto refresh main.css"
		au FocusGained,BufEnter * :silent! !

		" make YCM compatible with UltiSnips (using supertab)
		let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
		let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
		let g:SuperTabDefaultCompletionType = '<C-n>'
		" better key bindings for UltiSnipsExpandTrigger
		let g:UltiSnipsExpandTrigger = "<tab>"
		let g:UltiSnipsJumpForwardTrigger = "<tab>"
		let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

		" Maintain undo history between sessions 
		set undofile
		" Save folder undo history
		set undodir=~/.vim/undodir

""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""Remapp"""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""

		let mapleader=","



     	map <up> <nop>
     	map <down> <nop>
     	map <left> <nop>
     	map <right> <nop>
     	imap <up> <nop>
     	imap <down> <nop>
     	imap <left> <nop>
     	imap <right> <nop>

     	map ,, <esc>
     	imap ,, <esc>

     
     	map <F6> :NERDTreeToggle<CR>
		nnoremap <F5> :GundoToggle<CR>

		nnoremap <c-f> :Files<CR>
		nnoremap <C-g> :Rg<Cr>
		nnoremap <C-c> :Commits<Cr>
""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""Others""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""


" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
      \ call fzf#vim#grep(
      \   'git grep --line-number '.shellescape(<q-args>), 0,
      \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
command! -bang Colors
      \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
